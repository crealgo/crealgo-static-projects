{"version":3,"file":"FormControl-af3048fc.js","sources":["../../src/components/form/InputHelperText.tsx","../../src/components/form/InputLabel.tsx","../../src/components/form/FormControl.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const InputHelperText = styled.span`\n\tfont-weight: 500;\n\tfont-size: 0.75rem;\n\tline-height: 1rem;\n\n\tcolor: var(--color-text-secondary);\n`;\n","import styled from '@emotion/styled';\n\nexport const InputLabel = styled.label`\n\tdisplay: inline-flex;\n\tcolor: var(--color-text-primary);\n\tfont-size: 14px;\n\tline-height: 1rem;\n\tfont-weight: 500;\n`;\n","import styled from '@emotion/styled';\nimport clsx from 'clsx';\nimport {\n\tChildren,\n\tcloneElement,\n\tisValidElement,\n\tuseId,\n\ttype ComponentPropsWithRef,\n\ttype FC,\n\ttype ReactElement,\n\tuseEffect,\n\tuseRef,\n\ttype SyntheticEvent\n} from 'react';\nimport { type BaseComponentProps } from '../../types/base';\nimport { type Size } from '../../types/general';\nimport { type AutocompleteProps } from './Autocomplete';\nimport { type BaseInputProps, type InputProps } from './Input';\nimport { InputHelperText } from './InputHelperText';\nimport { InputLabel } from './InputLabel';\nimport { type SelectProps } from './Select';\n\nexport type FormControlProps = {\n\tlabel?: string;\n\thelperText?: string;\n\tcontrolSize?: Size;\n\tisFullWidth?: boolean;\n\tInputProps?: InputProps | SelectProps | AutocompleteProps;\n\tLabelProps?: ComponentPropsWithRef<'label'>;\n\tHelperTextProps?: ComponentPropsWithRef<'span'>;\n} & BaseComponentProps &\n\tPick<BaseInputProps, 'variant' | 'required'>;\n\nexport const Wrapper = styled.div`\n\tdisplay: inline-grid;\n\tmin-width: 10rem;\n\n\t.input {\n\t\tmargin-top: 0.25rem;\n\t}\n\n\t.input-helper-text {\n\t\tmargin-top: 0.125rem;\n\t}\n\n\t&.full-width {\n\t\twidth: 100%;\n\t}\n\n\t&.required {\n\t\t.input-label::after {\n\t\t\tcontent: '*';\n\t\t\tcolor: var(--color-feedback-error-main);\n\t\t}\n\t}\n`;\n\nconst touchedEventHandler = (event: SyntheticEvent<HTMLElement>) => {\n\tif (event.type === 'touched') {\n\t\tevent.stopPropagation();\n\n\t\t[\n\t\t\tevent.currentTarget,\n\t\t\t...event.currentTarget.querySelectorAll(\n\t\t\t\t'.input-label, .input-helper-text'\n\t\t\t)\n\t\t].forEach(el => {\n\t\t\tel.classList.add('touched');\n\t\t});\n\t}\n};\n\nexport const FormControl: FC<FormControlProps> = ({\n\tLabelProps,\n\tHelperTextProps,\n\t...props\n}) => {\n\tconst generatedId = useId();\n\tconst resolvedId = props.id ?? generatedId;\n\tconst inputId = `${resolvedId}-input`;\n\tconst helperTextId = `${resolvedId}-helper-text`;\n\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tif (!wrapperRef.current) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst el = wrapperRef.current;\n\n\t\t// @ts-expect-error syntetic-event vs event\n\t\tel.addEventListener('touched', touchedEventHandler);\n\n\t\treturn () => {\n\t\t\t// @ts-expect-error syntetic-event vs event\n\t\t\tel.removeEventListener('touched', touchedEventHandler);\n\t\t};\n\t}, [wrapperRef]);\n\n\treturn (\n\t\t<Wrapper\n\t\t\tref={wrapperRef}\n\t\t\tclassName={clsx(props.className, 'root', {\n\t\t\t\t'required': props.required,\n\t\t\t\t'full-width': props.isFullWidth\n\t\t\t})}\n\t\t>\n\t\t\t{props.label && (\n\t\t\t\t<InputLabel\n\t\t\t\t\tclassName=\"input-label\"\n\t\t\t\t\thtmlFor={inputId}\n\t\t\t\t\t{...LabelProps}\n\t\t\t\t>\n\t\t\t\t\t{props.label}\n\t\t\t\t</InputLabel>\n\t\t\t)}\n\t\t\t{Children.map(props.children, child => {\n\t\t\t\tif (isValidElement(child)) {\n\t\t\t\t\treturn cloneElement(child as ReactElement, {\n\t\t\t\t\t\t'id': inputId,\n\t\t\t\t\t\t'name': inputId,\n\t\t\t\t\t\t'className': clsx(\n\t\t\t\t\t\t\tchild.props.className as string,\n\t\t\t\t\t\t\t'input'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'required': props.required,\n\t\t\t\t\t\t'inputSize': props.controlSize ?? 'medium',\n\t\t\t\t\t\t'aria-describedby': helperTextId,\n\t\t\t\t\t\t...(child.props as {}),\n\t\t\t\t\t\t...props.InputProps\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn child;\n\t\t\t})}\n\t\t\t{props.helperText && (\n\t\t\t\t<InputHelperText\n\t\t\t\t\tid={helperTextId}\n\t\t\t\t\tclassName=\"input-helper-text\"\n\t\t\t\t\t{...HelperTextProps}\n\t\t\t\t>\n\t\t\t\t\t{props.helperText}\n\t\t\t\t</InputHelperText>\n\t\t\t)}\n\t\t</Wrapper>\n\t);\n};\n"],"names":["InputHelperText","styled","InputLabel","Wrapper","touchedEventHandler","event","el","FormControl","LabelProps","HelperTextProps","props","generatedId","useId","resolvedId","inputId","helperTextId","wrapperRef","useRef","useEffect","jsxs","clsx","jsx","Children","child","isValidElement","cloneElement"],"mappings":"4NAEO,MAAAA,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oSCAA,MAAAC,EAAAD,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0RC+BA,MAAAE,EAAAF,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBPG,EAAAC,GAAA,CACCA,EAAA,OAAA,YACCA,EAAA,gBAAA,EAEA,CAAAA,EAAA,cACO,GAAAA,EAAA,cAAA,iBACiB,kCACtB,CACD,EAAA,QAAAC,GAAA,CAEAA,EAAA,UAAA,IAAA,SAAA,CAA0B,CAAA,EAG7B,EAEOC,EAAA,CAAA,CAA2C,WAAAC,EACjD,gBAAAC,EACA,GAAAC,CAED,IAAA,CACC,MAAAC,EAAAC,EAAAA,QACAC,EAAAH,EAAA,IAAAC,EACAG,EAAA,GAAAD,UACAE,EAAA,GAAAF,gBAEAG,EAAAC,SAAA,IAAA,EAEAC,OAAAA,EAAAA,UAAA,IAAA,CACC,GAAA,CAAAF,EAAA,QACC,OAGD,MAAAV,EAAAU,EAAA,QAGA,OAAAV,EAAA,iBAAA,UAAAF,CAAA,EAEA,IAAA,CAECE,EAAA,oBAAA,UAAAF,CAAA,CAAqD,CACtD,EAAA,CAAAY,CAAA,CAAA,EAGDG,EACChB,EAAC,CAAA,IAAAa,EACK,UAAAI,EAAAV,EAAA,UAAA,OAAA,CACoC,SAAAA,EAAA,SACtB,aAAAA,EAAA,WACE,CAAA,EACpB,SAAA,CAEAA,EAAA,OAAAW,EACAnB,EAAC,CAAA,UAAA,cACU,QAAAY,EACD,GAAAN,EACL,SAAAE,EAAA,KAEG,CAAA,EACRY,EAAAA,SAAA,IAAAZ,EAAA,SAAAa,GAGAC,EAAAA,eAAAD,CAAA,EACCE,EAAAA,aAAAF,EAAA,CAA2C,GAAAT,EACpC,KAAAA,EACE,UAAAM,EACKG,EAAA,MAAA,UACA,OACZ,EACD,SAAAb,EAAA,SACkB,UAAAA,EAAA,aAAA,SACgB,mBAAAK,EACd,GAAAQ,EAAA,MACV,GAAAb,EAAA,UACD,CAAA,EAIXa,CAAO,EACPb,EAAA,YAAAW,EAEArB,EAAC,CAAA,GAAAe,EACI,UAAA,oBACM,GAAAN,EACN,SAAAC,EAAA,UAEG,CAAA,CACR,CAAA,CAAA,CAIJ"}