{"version":3,"file":"index-505088d3.js","sources":["../../node_modules/@mui/material/esm/colors/amber.js","../../src/components/base/ImageCarousel/DotsInput.tsx","../../src/components/base/ImageCarousel/ImageCarouselWrapper.tsx","../../src/components/base/ImageCarousel/index.tsx"],"sourcesContent":["const amber = {\n  50: '#fff8e1',\n  100: '#ffecb3',\n  200: '#ffe082',\n  300: '#ffd54f',\n  400: '#ffca28',\n  500: '#ffc107',\n  600: '#ffb300',\n  700: '#ffa000',\n  800: '#ff8f00',\n  900: '#ff6f00',\n  A100: '#ffe57f',\n  A200: '#ffd740',\n  A400: '#ffc400',\n  A700: '#ffab00'\n};\nexport default amber;","import { ArrowBack, ArrowForward } from '@mui/icons-material';\nimport { IconButton, styled, useControlled } from '@mui/material';\nimport { useId, type FC } from 'react';\n\ntype DotsInputProps = {\n\tcurrentIndex?: number;\n\tonIndexChange?: (index: number) => void;\n\tcount: number;\n\t// className?: string;\n};\n\nconst dotWidth = '0.5rem';\nconst dotWidthExpanded = '1.5rem';\nconst controlGap = '0.125rem';\n\nconst DotsInputWrapper = styled('div')<Pick<DotsInputProps, 'count'>>(\n\t({ count }) => ({\n\t\t'display': 'flex',\n\t\t'gap': controlGap,\n\t\t'alignItems': 'center',\n\t\t'position': 'absolute',\n\t\t'.DotInput-dots': {\n\t\t\tdisplay: 'flex',\n\t\t\twidth: `calc((${count - 1} * ${dotWidth}) + (${\n\t\t\t\tcount - 1\n\t\t\t} * ${controlGap}) + ${dotWidthExpanded})`,\n\t\t\tgap: controlGap,\n\t\t\talignItems: 'center',\n\t\t\tjustifyContent: 'center',\n\n\t\t\tlabel: {\n\t\t\t\t'&::before': {\n\t\t\t\t\tcontent: '\"\"',\n\t\t\t\t\tdisplay: 'block',\n\n\t\t\t\t\tborderRadius: '9999px',\n\t\t\t\t\theight: dotWidth,\n\t\t\t\t\twidth: dotWidth,\n\t\t\t\t\tbackgroundColor: 'var(--color-brand-primary-main)',\n\t\t\t\t\tborder: 'solid 1px white',\n\n\t\t\t\t\ttransition: 'width 300ms',\n\t\t\t\t\tcursor: 'pointer'\n\t\t\t\t},\n\t\t\t\t'&:hover::before': {\n\t\t\t\t\topacity: 1\n\t\t\t\t},\n\t\t\t\t'&[data-checked=true]::before': {\n\t\t\t\t\tbackgroundColor: 'var(--color-brand-primary-main)',\n\t\t\t\t\twidth: dotWidthExpanded,\n\t\t\t\t\tcursor: 'default'\n\t\t\t\t},\n\t\t\t\t'input[type=radio]': {\n\t\t\t\t\tdisplay: 'none',\n\t\t\t\t\tmargin: 0\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n);\n\nexport const DotsInput: FC<DotsInputProps> = ({\n\tcurrentIndex,\n\tonIndexChange,\n\tcount = 0\n}) => {\n\tconst [index, setIndex] = useControlled({\n\t\tdefault: 0,\n\t\tcontrolled: currentIndex,\n\t\tname: 'Dots Input Index'\n\t});\n\n\tconst goPrevious = () => {\n\t\tconsole.log('clicked');\n\n\t\tlet newIndex = index - 1;\n\n\t\tif (index === 0) {\n\t\t\tnewIndex = count - 1;\n\t\t}\n\n\t\tsetIndex(newIndex);\n\t\tonIndexChange?.(newIndex);\n\t};\n\n\tconst goNext = () => {\n\t\tlet newIndex = index + 1;\n\n\t\tif (index === count - 1) {\n\t\t\tnewIndex = 0;\n\t\t}\n\n\t\tsetIndex(newIndex);\n\t\tonIndexChange?.(newIndex);\n\t};\n\n\tconst generatedId = useId();\n\tconst radioGroupId = `${generatedId}-dot-input`;\n\n\treturn (\n\t\t<DotsInputWrapper className=\"DotsInput-root\" count={count}>\n\t\t\t<IconButton size=\"small\" color=\"primary\" onClick={goPrevious}>\n\t\t\t\t<ArrowBack />\n\t\t\t</IconButton>\n\t\t\t<div className=\"DotInput-dots\">\n\t\t\t\t{Array.from({ length: count }, (_, radioIndex) => (\n\t\t\t\t\t<input\n\t\t\t\t\t\tkey={radioIndex}\n\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\tclassName=\"DotsInput-input\"\n\t\t\t\t\t\tvalue={radioIndex}\n\t\t\t\t\t\taria-label={radioGroupId}\n\t\t\t\t\t\tname={radioGroupId}\n\t\t\t\t\t\tchecked={index === radioIndex}\n\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\tsetIndex(radioIndex);\n\t\t\t\t\t\t\tonIndexChange?.(radioIndex);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<IconButton size=\"small\" color=\"primary\" onClick={goNext}>\n\t\t\t\t<ArrowForward />\n\t\t\t</IconButton>\n\t\t</DotsInputWrapper>\n\t);\n};\n","import { colors, styled } from '@mui/material';\nimport { _e } from '../../../utils/excludePropsFromForwarding';\nimport { type SharedCarouseProps } from '.';\n\ntype CarouseWrapperProps = {\n\timageCount?: number;\n\tcurrentIndex?: number;\n} & SharedCarouseProps;\n\nexport const ImageCarouselWrapper = styled(\n\t'div',\n\t_e('height', 'width', 'imageCount', 'currentIndex')\n)<CarouseWrapperProps>(\n\t({ imageCount = 0, currentIndex = 0, height = '100%', width = '100%' }) => {\n\t\tconst imageCss: Record<string, unknown> = {};\n\n\t\tfor (let i = 0; i <= imageCount; i++) {\n\t\t\tconst colorIndex = (100 * (i + 1)) as keyof typeof colors.amber;\n\n\t\t\timageCss[`&:nth-of-type(${i + 1})`] = {\n\t\t\t\tbackgroundColor: colors.amber[colorIndex] || 'white',\n\t\t\t\ttransform: `translateX(calc(100% * ${i - currentIndex}))`\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\theight,\n\t\t\twidth,\n\t\t\t'position': 'relative',\n\t\t\t'overflow': 'hidden',\n\t\t\t'backgroundColor': 'var(--color-gray-100)',\n\t\t\t'aspectRatio': 1,\n\t\t\t'.Carousel-image': {\n\t\t\t\tposition: 'absolute',\n\t\t\t\twidth: '100%',\n\t\t\t\theight: '100%',\n\t\t\t\ttransition: 'transform 500ms',\n\t\t\t\t...imageCss\n\t\t\t},\n\t\t\t'.DotsInput-root': {\n\t\t\t\tposition: 'absolute',\n\t\t\t\tbottom: '0.5rem',\n\t\t\t\tleft: '50%',\n\t\t\t\ttransform: 'translateX(-50%)'\n\t\t\t}\n\t\t};\n\t}\n);\n","import { useControlled } from '@mui/material';\nimport clsx from 'clsx';\nimport { type FC } from 'react';\nimport { Image } from '../Image';\nimport { DotsInput } from './DotsInput';\nimport { ImageCarouselWrapper } from './ImageCarouselWrapper';\n\nexport type SharedCarouseProps = {\n\theight?: number;\n\twidth?: number;\n};\n\nexport type CarouselCardProps = {\n\ttilt?: 'left' | 'right';\n\t// interactive?: boolean;\n\timages: string[];\n\t// autoplay?: boolean;\n\tcurrentIndex?: number;\n\tclassName?: string;\n} & SharedCarouseProps;\n\nexport const ImageCarousel: FC<CarouselCardProps> = ({\n\timages,\n\t// autoplay,\n\tcurrentIndex,\n\t// interactive,\n\tclassName,\n\t...props\n}) => {\n\tconst [index, setIndex] = useControlled({\n\t\tdefault: 0,\n\t\tcontrolled: currentIndex,\n\t\tname: 'Dots Input Index'\n\t});\n\n\treturn (\n\t\t<ImageCarouselWrapper\n\t\t\timageCount={images.length}\n\t\t\tcurrentIndex={index}\n\t\t\tclassName={clsx('ImageCarousel-root', className)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{images.length\n\t\t\t\t? images.map((imageSrc, imageIndex) => (\n\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\tkey={imageIndex}\n\t\t\t\t\t\t\tclassName={clsx('Carousel-image', {\n\t\t\t\t\t\t\t\t'Carousel-selected': index === imageIndex\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t// ImageElementProps={{\n\t\t\t\t\t\t\t// \tsrc: imageSrc,\n\t\t\t\t\t\t\t// \talt: `Carousel Image ${imageIndex}`\n\t\t\t\t\t\t\t// }}\n\t\t\t\t\t\t/>\n\t\t\t\t  ))\n\t\t\t\t: null}\n\t\t\t<DotsInput\n\t\t\t\tcurrentIndex={index}\n\t\t\t\tcount={images.length}\n\t\t\t\tonIndexChange={index => {\n\t\t\t\t\tsetIndex(index);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</ImageCarouselWrapper>\n\t);\n};\n"],"names":["amber","amber$1","dotWidth","dotWidthExpanded","controlGap","DotsInputWrapper","styled","count","DotsInput","currentIndex","onIndexChange","index","setIndex","useControlled","goPrevious","newIndex","goNext","radioGroupId","useId","jsxs","jsx","IconButton","ArrowBack","_","radioIndex","ArrowForward","ImageCarouselWrapper","_e","imageCount","height","width","imageCss","i","colorIndex","colors.amber","ImageCarousel","images","className","props","clsx","imageSrc","imageIndex","Image","index2"],"mappings":"qeAAA,MAAMA,EAAQ,CACZ,GAAI,UACJ,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,IAAK,UACL,KAAM,UACN,KAAM,UACN,KAAM,UACN,KAAM,SACR,EACAC,EAAeD,ECLfE,EAAA,SACAC,EAAA,SACAC,EAAA,WAEAC,EAAAC,EAAA,KAAA,EAAqC,CAAA,CAAA,MAAAC,CAAA,KAAA,CACpB,QAAA,OACJ,IAAAH,EACJ,WAAA,SACO,SAAA,WACF,iBAAA,CACM,QAAA,OACR,MAAA,SAAAG,EAAA,OAAAL,SAAAK,EAAA,OAAAH,QAAAD,KAGc,IAAAC,EAClB,WAAA,SACO,eAAA,SACI,MAAA,CAET,YAAA,CACO,QAAA,KACH,QAAA,QACA,aAAA,SAEK,OAAAF,EACN,MAAAA,EACD,gBAAA,kCACU,OAAA,kBACT,WAAA,cAEI,OAAA,SACJ,EACT,kBAAA,CACmB,QAAA,CACT,EACV,+BAAA,CACgC,gBAAA,kCACd,MAAAC,EACV,OAAA,SACC,EACT,oBAAA,CACqB,QAAA,OACX,OAAA,CACD,CACT,CACD,CACD,EAEF,EAEOK,EAAA,CAAA,CAAuC,aAAAC,EAC7C,cAAAC,EACA,MAAAH,EAAA,CAED,IAAA,CACC,KAAA,CAAAI,EAAAC,CAAA,EAAAC,EAAA,CAAwC,QAAA,EAC9B,WAAAJ,EACG,KAAA,kBACN,CAAA,EAGPK,EAAA,IAAA,CACC,QAAA,IAAA,SAAA,EAEA,IAAAC,EAAAJ,EAAA,EAEAA,IAAA,IACCI,EAAAR,EAAA,GAGDK,EAAAG,CAAA,EACAL,GAAA,MAAAA,EAAAK,EAAwB,EAGzBC,EAAA,IAAA,CACC,IAAAD,EAAAJ,EAAA,EAEAA,IAAAJ,EAAA,IACCQ,EAAA,GAGDH,EAAAG,CAAA,EACAL,GAAA,MAAAA,EAAAK,EAAwB,EAIzBE,EAAA,GADAC,EAAAA,oBAGA,OAAAC,EAAAd,EAAA,CAAA,UAAA,iBAAA,MAAAE,EAAA,SAAA,CAEEa,EAAAC,EAAA,CAAA,KAAA,QAAA,MAAA,UAAA,QAAAP,EAAA,SAAAM,EAAAE,EAAA,CAAA,CAAA,CAAA,CAAA,EAEAF,EAAA,MAAA,CAAA,UAAA,gBAAA,SAAA,MAAA,KAAA,CAAA,OAAAb,CAAA,EAAA,CAAAgB,EAAAC,IAAAJ,EAGE,QAAC,CAAA,KAAA,QAEK,UAAA,kBACK,MAAAI,EACH,aAAAP,EACK,KAAAA,EACN,QAAAN,IAAAa,EACa,SAAA,IAAA,CAElBZ,EAAAY,CAAA,EACAd,GAAA,MAAAA,EAAAc,EAA0B,CAC3B,EAAAA,CAVK,CAAA,EAAA,EAaRJ,EAAAC,EAAA,CAAA,KAAA,QAAA,MAAA,UAAA,QAAAL,EAAA,SAAAI,EAAAK,EAAA,CAAA,CAAA,CAAA,CAAA,CAGA,CAAA,CAAA,CAGH,oaCrHO,MAAAC,EAAApB,EAA6B,MACnCqB,EAAA,SAAA,QAAA,aAAA,cAAA,CAED,EAAA,CAAA,CAAA,WAAAC,EAAA,EAAA,aAAAnB,EAAA,EAAA,OAAAoB,EAAA,OAAA,MAAAC,EAAA,UAAA,CAEE,MAAAC,EAAA,CAAA,EAEA,QAAAC,EAAA,EAAAA,GAAAJ,EAAAI,IAAA,CACC,MAAAC,EAAA,KAAAD,EAAA,GAEAD,EAAA,iBAAAC,EAAA,IAAA,EAAA,CAAsC,gBAAAE,EAAAD,CAAA,GAAA,QACQ,UAAA,0BAAAD,EAAAvB,KACJ,EAI3C,MAAA,CAAO,OAAAoB,EACN,MAAAC,EACA,SAAA,WACY,SAAA,SACA,gBAAA,wBACO,YAAA,EACJ,kBAAA,CACI,SAAA,WACR,MAAA,OACH,OAAA,OACC,WAAA,kBACI,GAAAC,CACT,EACJ,kBAAA,CACmB,SAAA,WACR,OAAA,SACF,KAAA,MACF,UAAA,kBACK,CACZ,CACD,CAEF,mfC1BO,MAAAI,EAAA,CAAA,CAA8C,OAAAC,EACpD,aAAA3B,EAEA,UAAA4B,EAEA,GAAAC,CAED,IAAA,CACC,KAAA,CAAA3B,EAAAC,CAAA,EAAAC,EAAA,CAAwC,QAAA,EAC9B,WAAAJ,EACG,KAAA,kBACN,CAAA,EAGP,OAAAU,EACCO,EAAC,CAAA,WAAAU,EAAA,OACmB,aAAAzB,EACL,UAAA4B,EAAA,qBAAAF,CAAA,EACiC,GAAAC,EAC3C,SAAA,CAEHF,EAAA,OAAAA,EAAA,IAAA,CAAAI,EAAAC,IAAArB,EAEEsB,EAAC,CAAA,UAAAH,EAAA,iBAAA,CAEkC,oBAAA5B,IAAA8B,CACF,CAAA,CAC/B,EAAAA,CAHI,CAAA,EAAA,KAUNrB,EACHZ,EAAC,CAAA,aAAAG,EACc,MAAAyB,EAAA,OACA,cAAAO,GAAA,CAEb/B,EAAA+B,CAAA,CAAc,CACf,CAAA,CACD,CAAA,CAAA,CAGH","x_google_ignoreList":[0]}